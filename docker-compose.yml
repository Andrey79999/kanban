version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: kanban_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: board_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kanban_network

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: kanban_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - kanban_network

  # MinIO Client - Create bucket on startup
  minio_init:
    image: minio/mc:latest
    container_name: kanban_minio_init
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/kanban-files --ignore-existing;
      /usr/bin/mc anonymous set download myminio/kanban-files;
      exit 0;
      "
    networks:
      - kanban_network

  # Board Service
  board_service:
    build:
      context: ./board_service
      dockerfile: Dockerfile
    container_name: kanban_board_service
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/board_db
      - FILE_SERVICE_URL=http://file_service:8001
      - CORS_ORIGINS=["http://localhost:3000","http://localhost:8000"]
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
      alembic upgrade head &&
      uvicorn main:app --host 0.0.0.0 --port 8000
      "
    networks:
      - kanban_network
    restart: unless-stopped

  # File Service
  file_service:
    build:
      context: ./file_service
    container_name: kanban_file_service
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/file_db
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET_NAME=kanban-files
      - MINIO_SECURE=false
      - CORS_ORIGINS=["http://localhost:3000","http://localhost:8000","http://localhost:8001"]
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio_init:
        condition: service_completed_successfully
    networks:
      - kanban_network
    command: >
      sh -c '
        alembic upgrade head &&
        uvicorn main:app --host 0.0.0.0 --port 8001
      '
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
    container_name: kanban_frontend
    ports:
      - "3000:80"
    depends_on:
      - board_service
      - file_service
    networks:
      - kanban_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local

networks:
  kanban_network:
    driver: bridge
